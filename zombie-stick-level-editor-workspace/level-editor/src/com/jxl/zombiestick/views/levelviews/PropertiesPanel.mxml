<?xml version="1.0"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 enabled="false">

	<fx:Script>
		<![CDATA[
			import com.jxl.zombiestick.constants.GameObjectTypes;
			import com.jxl.zombiestick.constants.subtypes.CharacterTypes;
			import com.jxl.zombiestick.constants.subtypes.EnemyTypes;
			import com.jxl.zombiestick.constants.subtypes.TerrainTypes;
			import com.jxl.zombiestick.events.view.PropertiesPanelEvent;
			import com.jxl.zombiestick.vo.GameObjectVO;
			
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;

			private var _selections:ArrayCollection;
			private var selectionsDirty:Boolean = false;
		private var typeDirty:Boolean = false;
		private var gameObjectDirty:Boolean = false;
			private var xyDirty:Boolean = false;
			private var widthHeightDirty:Boolean = false;
			
			
			
		private var gameObjectTypes:ArrayCollection = new ArrayCollection([GameObjectTypes.NONE,
			GameObjectTypes.TERRAIN,
			GameObjectTypes.PLAYER,
			GameObjectTypes.ENEMY]);
		private var file:File;
		private var gameObjectTerrainTypes:ArrayCollection = new ArrayCollection([TerrainTypes.NONE,
			TerrainTypes.FLOOR,
			TerrainTypes.CRATE,
			TerrainTypes.GRAPPLE_TARGET,
			TerrainTypes.LEDGE,
			TerrainTypes.CHAIR_LEFT,
			TerrainTypes.CHAIR_RIGHT,
			TerrainTypes.TABLE,
			TerrainTypes.FIREHOSE,
			TerrainTypes.GENERIC_SENSOR,
			TerrainTypes.WINDOW_PIECE,
			TerrainTypes.DOOR
		]);
		private var gameObjectPlayerTypes:ArrayCollection = new ArrayCollection([CharacterTypes.NONE,
			CharacterTypes.JESTERXL,
			CharacterTypes.FREEMAN
		]);
		private var gameObjectEnemyTypes:ArrayCollection = new ArrayCollection([EnemyTypes.NONE,
			EnemyTypes.ZOMBIE
		]);
			
			public function get selections():ArrayCollection
			{
				return _selections;
			}
			
			public function set selections(value:ArrayCollection):void
			{
				if(_selections !== value)
				{
					selectionsDirty = true;
					var len:int;
					var gameObject:GameObjectVO;
					var index:int;
					if(_selections)
					{
						_selections.removeEventListener(CollectionEvent.COLLECTION_CHANGE, onSelectionsChanged);
						
						len = _selections.length;
						for(index = 0; index < len; index++)
						{
							gameObject = _selections[index];
							gameObject.removeEventListener("typeChanged", onTypeChanged);
							gameObject.removeEventListener("subTypeChanged", onSubTypeChanged);
							gameObject.removeEventListener("xChanged", onXYChanged);
							gameObject.removeEventListener("yChanged", onXYChanged);
							gameObject.removeEventListener("widthChanged", onWidthHeightChanged);
							gameObject.removeEventListener("heightChanged", onWidthHeightChanged);
						}
					}
					_selections = value;
					if(_selections)
					{
						_selections.addEventListener(CollectionEvent.COLLECTION_CHANGE, onSelectionsChanged);
						
						len = _selections.length;
						for(index = 0; index < len; index++)
						{
							gameObject = _selections[index];
							gameObject.addEventListener("typeChanged", onTypeChanged);
							gameObject.addEventListener("subTypeChanged", onSubTypeChanged);
							gameObject.addEventListener("xChanged", onXYChanged);
							gameObject.addEventListener("yChanged", onXYChanged);
							gameObject.addEventListener("widthChanged", onWidthHeightChanged);
							gameObject.addEventListener("heightChanged", onWidthHeightChanged);
						}
					}
					invalidateProperties();
				}
			}

		protected override function commitProperties():void
		{
			super.commitProperties();

			var len:int;
			var gameObject:GameObjectVO;
			
			if (selectionsDirty)
			{
				selectionsDirty = false;
				if(selections == null || selections.length < 1)
				{
					enabled = false;
				}
				else
				{
					enabled = true;
					
					/*
					controlHash = {
						x: {name: "value", control: xNumericStepper},
						y: {name: "value", control: yNumericStepper},
						width: {name: "value", control: widthNumericStepper},
						height: {name: "value", control: heightNumericStepper},
						image: {name: "text", control: imageTextInput},
						imageRelativeToLevelPath: {name: "selected", control: imagePathCheckBox},
						density: {name: "value", control: densitySlider},
						friction: {name: "value", control: frictionSlider},
						bounce: {name: "value", control: bounceSlider},
						customName: {name: "text", control: customNameTextInput}
					};
					*/
					
					//applyToControlAndEnableDisable(xNumericStepper, "value", "x");
					//applyToControlAndEnableDisable(yNumericStepper, "value", "y");
					//applyToControlAndEnableDisable(widthNumericStepper, "value", "width");
					//applyToControlAndEnableDisable(heightNumericStepper, "value", "height");
					
					xyDirty = true;
					widthHeightDirty = true;
					typeDirty = true;
					
					
					applyToControlAndEnableDisable(imageTextInput, "text", "image");
					applyToControlAndEnableDisable(imagePathCheckBox, "selected", "imageRelativeToLevelPath");
					applyToControlAndEnableDisable(densitySlider, "value", "density");
					applyToControlAndEnableDisable(frictionSlider, "value", "friction");
					applyToControlAndEnableDisable(bounceSlider, "value", "bounce");
					applyToControlAndEnableDisable(customNameTextInput, "text", "customName");
					applyToControlAndEnableDisable(targetDoorTextInput, "text", "targetDoor");
					applyToControlAndEnableDisable(targetMovieTextInput, "text", "targetMovie");
				}
			}

			if(typeDirty)
			{
				typeDirty = false;
				if(selections && selections.length > 0)
				{
					len = selections.length;
					var lastValue:String = null;
					var differ:Boolean = false;
					while(len--)
					{
						gameObject = selections[len];
						if(lastValue == null)
						{
							lastValue = gameObject.type;
						}
						else
						{
							if(gameObject.type != lastValue)
							{
								differ = true;
								break;
							}
						}
					}
					
					if(differ)
					{
						typeComboBox.selectedItem = GameObjectTypes.NONE;
					}
					else
					{
						typeComboBox.selectedItem = lastValue;
					}
					updateSubTypeComboBox();
				}
			}
			
			if(xyDirty)
			{
				xyDirty = false;
				calculatePointAndApplyToControls();
			}
			
			if(widthHeightDirty)
			{
				widthHeightDirty = false;
				calculateRectAndApplyToControls();
			}
		}
			
		private function onSelectionsChanged(event:CollectionEvent):void
		{
			selectionsDirty = true;
			invalidateProperties();
		}

		private function onTypeChanged(event:Event):void
		{
			typeDirty = true;
			invalidateProperties();
		}

		private function onSubTypeChanged(event:Event):void
		{
			typeDirty = true;
			invalidateProperties();
		}
			
		private function onXYChanged(event:Event):void
		{
			xyDirty = true;
			invalidateProperties();
		}
			
		private function onWidthHeightChanged(event:Event):void
		{
			widthHeightDirty = true;
			invalidateProperties();
		}

		private function onTypeComboBoxChanged():void
		{
			if(selections && selections.length > 0)
			{
				if(typeComboBox.selectedItem != GameObjectTypes.NONE)
				{
					var len:int = selections.length;
					while(len--)
					{
						var gameObject:GameObjectVO = selections[len];
						gameObject.type = typeComboBox.selectedItem;
					}
				}
			}
			
			updateSubTypeComboBox();
		}

		private function updateSubTypeComboBox():void
		{
			if(selections && selections.length > 0)
			{
				var len:int = selections.length;
				var lastValue:String = null;
				var lastSubType:String = null;
				var differ:Boolean = false;
				while(len--)
				{
					var gameObject:GameObjectVO = selections[len];
					if(lastValue == null)
					{
						lastValue = gameObject.type;
						lastSubType = gameObject.subType;
					}
					else
					{
						if(gameObject.type != lastValue || gameObject.subType != lastSubType)
						{
							differ = true;
							break;
						}
					}
				}
				
				if(differ == false)
				{
					switch(lastValue)
					{
						case GameObjectTypes.ENEMY:
							subTypeComboBox.dataProvider = gameObjectEnemyTypes;
							break;
						
						case GameObjectTypes.PLAYER:
							subTypeComboBox.dataProvider = gameObjectPlayerTypes;
							break;
						
						case GameObjectTypes.TERRAIN:
							subTypeComboBox.dataProvider = gameObjectTerrainTypes;
							break;
					}
					
					if(subTypeComboBox.dataProvider.getItemIndex(lastSubType) != -1)
					{
						subTypeComboBox.selectedItem = lastSubType;
					}
					else
					{
						subTypeComboBox.selectedIndex = 0;
					}
					
					if(lastValue == GameObjectTypes.TERRAIN && lastSubType == TerrainTypes.LEDGE)
					{
						ledgeExitDirectionFormItem.includeInLayout = ledgeExitDirectionFormItem.visible = true;
					}
					else
					{
						ledgeExitDirectionFormItem.includeInLayout = ledgeExitDirectionFormItem.visible = false;
					}
				}
				else
				{
					subTypeComboBox.selectedIndex = 0;
				}
			}
		}

		private function onSubTypeComboBoxChange():void
		{
			if(selections && selections.length > 0)
			{
				if(subTypeComboBox.selectedItem != "none")
				{
					var len:int = selections.length;
					while(len--)
					{
						var gameObject:GameObjectVO = selections[len];
						// [jwarden 2.10.2011] TODO: need to add validation here; you can allow them
						// to set sub-types to things that shouldn't be.
						gameObject.subType = subTypeComboBox.selectedItem;
					}
				}
			}
		}

		private function calculatePointAndApplyToControls():void
		{
			// calculate point, and get the top left most #; based on Flash IDE behavior
			var point:Point = new Point();
			var len:int = selections.length;
			var firstTime:Boolean = true;
			for(var index:int = 0; index < len; index++)
			{
				var gameObject:GameObjectVO = selections[index];
				if(firstTime == false)
				{
					point.x = Math.min(point.x, gameObject.x);
					point.y = Math.min(point.y, gameObject.y);
				}
				else
				{
					firstTime = false;
					point.x = gameObject.x;
					point.y = gameObject.y;
				}
			}
			xNumericStepper.value = point.x;
			yNumericStepper.value = point.y;
		}
			
		private function calculateRectAndApplyToControls():void
		{
			// calculate rect, and get the widest; based on Flash IDE behavior
			var rect:Rectangle = new Rectangle();
			var len:int = selections.length;
			var firstTime:Boolean = true;
			for(var index:int = 0; index < len; index++)
			{
				var gameObject:GameObjectVO = selections[index];
				if(firstTime == false)
				{
					rect.x = Math.min(rect.x, gameObject.x);
					rect.y = Math.min(rect.y, gameObject.y);
					rect.width = Math.max(rect.width, gameObject.width);
					rect.height = Math.max(rect.height, gameObject.height);
				}
				else
				{
					firstTime = false;
					rect.x = gameObject.x;
					rect.y = gameObject.y;
					rect.width = gameObject.width;
					rect.height = gameObject.height;
				}
			}
			widthNumericStepper.value = rect.width;
			heightNumericStepper.value = rect.height;
		}
			
		// UI Controls Change functions: Update the GameObjectVO
		private function onBrowseForImage():void
		{
			if (file == null)
			{
				file = new File();
				file.addEventListener(Event.SELECT, onImageSelected);
			}
			file.browseForOpen("Image", [new FileFilter("JPG", "*.jpg,*.jpeg"), new FileFilter("PNG", "*.png")]);
		}

		private function onImageSelected(event:Event):void
		{
			applyToSelections("image", file.url);
		}

		private function onImagePathRelativeChanged():void
		{
			applyToSelections("imageRelativeToLevelPath", imagePathCheckBox.selected);
		}

		private function onDensityChange():void
		{
			applyToSelections("density", densitySlider.value);
		}

		private function onFrictionChange():void
		{
			applyToSelections("friction", frictionSlider.value);
		}

		private function onBounceChange():void
		{
			applyToSelections("bounce", bounceSlider.value);
		}
			
		private function onChangeLedgeExitDirection():void
		{
			if(ledgeExitDirectionLeftRadioButton.selected)
			{
				applyToSelections("ledgeExitDirection", "left");
			}
			else
			{
				applyToSelections("ledgeExitDirection", "right");
			}
		}
			
			private function onCustomNameChange():void
			{
				applyToSelections("customName", customNameTextInput.text);
			}
			
			private function onTargetDoorChanged():void
			{
				applyToSelections("targetDoor", targetDoorTextInput.text);
			}
			
			private function onTargetMovieChanged():void
			{
				applyToSelections("targetMovie", targetMovieTextInput.text);
			}
			
			private function getMostTopLeft(prop:String):GameObjectVO
			{
				var len:int = selections.length;
				var firstTime:Boolean = true;
				var target:GameObjectVO;
				for(var index:int = 0; index < len; index++)
				{
					var gameObject:GameObjectVO = selections[index];
					if(firstTime == false)
					{
						if(gameObject[prop] < target[prop])
						{
							target = gameObject;
						}
					}
					else
					{
						firstTime = false;
						target = gameObject;
					}
				}
				return target;
			}
			
			private function onXNumericStepperChanged():void
			{
				var event:PropertiesPanelEvent = new PropertiesPanelEvent(PropertiesPanelEvent.MOVE_GAME_OBJECTS);
				var topLeftGameObject:GameObjectVO = getMostTopLeft("x");
				event.xAmount = xNumericStepper.value - topLeftGameObject.x;
				event.yAmount = 0;
				dispatchEvent(event);
			}
			
			private function onYNumericStepperChanged():void
			{
				var event:PropertiesPanelEvent = new PropertiesPanelEvent(PropertiesPanelEvent.MOVE_GAME_OBJECTS);
				var topLeftGameObject:GameObjectVO = getMostTopLeft("y");
				event.xAmount = 0;
				event.yAmount = yNumericStepper.value - topLeftGameObject.y;
				dispatchEvent(event);
			}
			
			private function onWidthNumericStepperChanged():void
			{
				applyToSelections("width", widthNumericStepper.value);
				/*
				var event:PropertiesPanelEvent = new PropertiesPanelEvent(PropertiesPanelEvent.RESIZE_GAME_OBJECTS);
				var firstSelected:GameObjectVO = selections[0];
				event.widthAmount = widthNumericStepper.value - firstSelected.width;
				event.heightAmount = 0;
				dispatchEvent(event);
				*/
			}
			
			private function onHeightNumericStepperChanged():void
			{
				applyToSelections("height", heightNumericStepper.value);
				/*
				var event:PropertiesPanelEvent = new PropertiesPanelEvent(PropertiesPanelEvent.RESIZE_GAME_OBJECTS);
				var firstSelected:GameObjectVO = selections[0];
				event.widthAmount = 0;
				event.heightAmount = yNumericStepper.value - firstSelected.height;
				dispatchEvent(event);
				*/
			}
			
			private function applyToSelections(propName:String, value:*):void
			{
				if(selections == null || selections.length < 1)
					return;
				
				var len:int = selections.length;
				while(len--)
				{
					var gameObject:GameObjectVO = selections[len];
					gameObject[propName] = value;
				}
			}
			
			private function applyToControlAndEnableDisable(control:*, propName:String, gameObjectPropName:String):void
			{
				if(selections == null || selections.length < 1)
					return;
				
				var len:int = selections.length;
				var differ:Boolean = false;
				var lastValue:*;
				while(len--)
				{
					var gameObject:GameObjectVO = selections[len];
					if(lastValue == null)
					{
						lastValue = gameObject[gameObjectPropName];
					}
					else
					{
						if(gameObject[gameObjectPropName] != lastValue)
						{
							differ = true;
							break;
						}
					}
				}
				
				if(differ == false)
				{
					control.enabled = true;
					control[propName] = gameObject[gameObjectPropName];
				}
				else
				{
					control.enabled = false;
					if(control.hasOwnProperty("text"))
						control.text = "---";
				}
			}

		]]>
	</fx:Script>

	<s:Form>
		<s:layout>
			<s:FormLayout gap="-12" paddingLeft="-8" paddingBottom="-8" paddingRight="-8" paddingTop="-8"/>
		</s:layout>
		
		<s:FormHeading label="Properties" />
		
		<s:FormItem label="X:">
			<s:NumericStepper id="xNumericStepper" change="onXNumericStepperChanged()"
							  minimum="-100"
							  maximum="2880"/>
		</s:FormItem>
		<s:FormItem label="Y:">
			<s:NumericStepper id="yNumericStepper" change="onYNumericStepperChanged()"
							  minimum="-100"
							  maximum="2880"/>
		</s:FormItem>
		<s:FormItem label="Width:">
			<s:NumericStepper id="widthNumericStepper" 
							  change="onWidthNumericStepperChanged()"
							  minimum="-100"
							  maximum="2880"/>
		</s:FormItem>
		<s:FormItem label="Height:">
			<s:NumericStepper id="heightNumericStepper"
							  change="onHeightNumericStepperChanged()"
							  minimum="-100"
							  maximum="2880"/>
		</s:FormItem>
		<s:FormItem label="Type:">
			<s:ComboBox id="typeComboBox" change="onTypeComboBoxChanged()"
						dataProvider="{gameObjectTypes}"
					/>
			<s:ComboBox id="subTypeComboBox" change="onSubTypeComboBoxChange()" />
		</s:FormItem>
		<s:FormItem label="Image:">
			<s:TextInput id="imageTextInput" editable="false" />
			<s:Button label="Browse" click="onBrowseForImage()"/>
			<s:CheckBox id="imagePathCheckBox" label="Relative To Level"
						change="onImagePathRelativeChanged()"/>
		</s:FormItem>
		<s:FormItem label="Density:">
			<s:HSlider id="densitySlider" minimum="0" maximum="2" stepSize=".1" change="onDensityChange()" />
		</s:FormItem>
		<s:FormItem label="Friction:">
			<s:HSlider id="frictionSlider" minimum="0" maximum="2" stepSize=".1" change="onFrictionChange()" />
		</s:FormItem>
		<s:FormItem label="Bounce:">
			<s:HSlider id="bounceSlider" minimum="0" maximum="2" stepSize=".1"  change="onBounceChange()" />
		</s:FormItem>
		<s:FormItem label="Exit Direction:" id="ledgeExitDirectionFormItem">
			<s:RadioButton id="ledgeExitDirectionRightRadioButton" 
						   label="Right"
						   click="onChangeLedgeExitDirection()" />
			<s:RadioButton id="ledgeExitDirectionLeftRadioButton" 
						   label="Left"
						   click="onChangeLedgeExitDirection()" />
		</s:FormItem>
		<s:FormItem label="Custom Name:">
			<s:TextInput id="customNameTextInput"
						 change="onCustomNameChange()" />
		</s:FormItem>
		<s:FormItem label="Target Door:">
			<s:TextInput id="targetDoorTextInput" change="onTargetDoorChanged()" />
		</s:FormItem>
		<s:FormItem label="Target Movie:">
			<s:TextInput id="targetMovieTextInput" change="onTargetMovieChanged()" />
		</s:FormItem>
	</s:Form>

</s:Group>
